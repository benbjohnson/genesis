// Code generated by genesis.
// DO NOT EDIT.

package mypkg

import (
	"bytes"
	"net/http"
	"os"
	"path"
	"regexp"
	"strings"
	"time"
)

var assetMap = map[string]*File{
}

var assetNames = []string{
}

// File represents a single embedded asset file.
type File struct {
	name    string
	hash    string
	modTime time.Time
	data    []byte
}

// Name returns the full path of the file.
func (f *File) Name() string { return f.name }

// Hash returns the SHA256 hash of the file's data.
func (f *File) Hash() string { return f.hash }

// ModTime returns the last modified date of the file when it was generated.
func (f *File) ModTime() time.Time { return f.modTime }

// Data returns the raw embedded data for the file.
func (f *File) Data() []byte { return f.data }

// Asset returns the raw data given an embedded filename.
// Returns nil if the asset cannot be found.
func Asset(name string) []byte {
	if f := AssetFile(name); f != nil {
		return f.Data()
	}
	return nil
}

// AssetFile returns the File object given an embedded filename.
// Returns nil if the asset cannot be found.
func AssetFile(name string) *File {
	if f := assetMap[name]; f != nil {
		return f
	}
	file, hash := SplitNameHash(name)
	if f := assetMap[file]; f != nil && strings.HasPrefix(f.hash, hash) {
		return f
	}
	return nil
}

// AssetNames returns a sorted list of all embedded asset filenames.
func AssetNames() []string {
	return assetNames
}

// AssetNameWithHash returns the asset name with a short hash before the extension.
// Returns name if the asset cannot be found.
func AssetNameWithHash(name string) string {
	if f := AssetFile(name); f != nil {
		return JoinNameHash(f.Name(), f.Hash())
	}
	return name
}

// FileSystem returns a http.FileSystem implementation of the embedded files.
// This can be used with http.FileServer().
func FileSystem() http.FileSystem { return &httpFileSystem{} }

type httpFileSystem struct{}

func (fs *httpFileSystem) Open(name string) (http.File, error) {
	f := AssetFile(name)
	if f == nil {
		return nil, &os.PathError{Path: "/" + name, Err: os.ErrNotExist}
	}
	return newHTTPFile(f), nil
}

// FileServer returns a handler that supports accessing assets with embedded hashes.
func FileServer() http.Handler {
	return &httpFileServer{}
}

type httpFileServer struct{}

func (h *httpFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Path
	if !strings.HasPrefix(name, "/") {
		name = "/" + name
		r.URL.Path = name
	}

	f := AssetFile(path.Clean(name))
	if f == nil {
		http.Error(w, "404 page not found", http.StatusNotFound)
		return
	}

	if HasNameHash(name) {
		w.Header().Set("Cache-Control", "max-age=31536000")
	}
	http.ServeContent(w, r, f.Name(), f.ModTime(), newHTTPFile(f))
}

func newHTTPFile(f *File) *httpFile {
	return &httpFile{File: f, Reader: bytes.NewReader(f.data)}
}

type httpFile struct {
	*File
	*bytes.Reader
}

func (f *httpFile) Close() error               { return nil }
func (f *httpFile) Stat() (os.FileInfo, error) { return f, nil }
func (f *httpFile) Size() int64                { return int64(len(f.File.Data())) }
func (f *httpFile) Mode() os.FileMode          { return 0444 }
func (f *httpFile) ModTime() time.Time         { return time.Time{} }
func (f *httpFile) IsDir() bool                { return false }
func (f *httpFile) Sys() interface{}           { return nil }
func (f *httpFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, &os.PathError{Path: "/" + f.name, Err: os.ErrPermission}
}

// JoinNameHash returns a filename with hash embedded before the extension.
func JoinNameHash(name, hash string) string {
	return strings.TrimSuffix(name, path.Ext(name)) + "-" + hash + path.Ext(name)
}

// SplitNameHash separates name into its original filename and hash parts.
func SplitNameHash(name string) (file, hash string) {
	ext := path.Ext(name)
	base := strings.TrimSuffix(name, ext)
	file = hashSuffixRegex.ReplaceAllLiteralString(base, "") + path.Ext(name)
	if s := hashSuffixRegex.FindString(base); s != "" {
		hash = s[1:]
	}
	return file, hash
}

// HasNameHash returns true if name contains an embedded hash.
func HasNameHash(name string) bool {
	return hashSuffixRegex.MatchString(strings.TrimSuffix(name, path.Ext(name)))
}

var hashSuffixRegex = regexp.MustCompile("-[0-9a-f]{7,}$")
